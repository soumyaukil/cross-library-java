From fbc34db3f349447f9918049783a445d07d90e980 Mon Sep 17 00:00:00 2001
From: Soumya Prasad Ukil <soumukil@amazon.com>
Date: Tue, 8 Jan 2019 17:10:07 +0000
Subject: [PATCH] My submission

---
 build.gradle                                       |   4 +-
 .../techtrial/CrossLibraryApplication.java         |   7 +-
 .../techtrial/controller/BookController.java       |  75 +++---
 .../techtrial/controller/MemberController.java     | 132 +++++-----
 .../controller/TransactionController.java          |  97 +++++---
 .../com/crossover/techtrial/dto/TopMemberDTO.java  | 124 +++++-----
 .../exceptions/GlobalExceptionHandler.java         |  25 +-
 .../java/com/crossover/techtrial/model/Book.java   | 120 ++++-----
 .../java/com/crossover/techtrial/model/Member.java | 216 ++++++++--------
 .../techtrial/model/MembershipStatus.java          |   8 +-
 .../com/crossover/techtrial/model/Transaction.java | 140 +++++------
 .../techtrial/repositories/BookRepository.java     |   2 +-
 .../techtrial/repositories/MemberRepository.java   |  36 ++-
 .../repositories/TransactionRepository.java        |  11 +-
 .../crossover/techtrial/service/BookService.java   |  13 +-
 .../techtrial/service/BookServiceImpl.java         |  35 +--
 .../crossover/techtrial/service/MemberService.java |  13 +-
 .../techtrial/service/MemberServiceImpl.java       |  32 +--
 src/main/main.iml                                  |  11 +
 .../resources/db/changelog/db.changelog-1.0.xml    |   2 +-
 .../resources/db/changelog/db.changelog-2.0.xml    |   8 +
 .../resources/db/changelog/db.changelog-master.xml |   2 +-
 .../techtrial/controller/BookControllerTest.java   | 105 ++++++++
 .../techtrial/controller/MemberControllerTest.java | 200 +++++++++++----
 .../controller/TransactionControllerTest.java      | 273 +++++++++++++++++++++
 src/test/test.iml                                  |  12 +
 26 files changed, 1139 insertions(+), 564 deletions(-)
 create mode 100644 src/main/main.iml
 create mode 100644 src/main/resources/db/changelog/db.changelog-2.0.xml
 create mode 100644 src/test/java/com/crossover/techtrial/controller/BookControllerTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/controller/TransactionControllerTest.java
 create mode 100644 src/test/test.iml

diff --git a/build.gradle b/build.gradle
index 2d73af5..8e1691a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -23,7 +23,7 @@ apply plugin: 'io.spring.dependency-management'
 apply plugin: 'com.github.ksoichiro.console.reporter'
 
 group = 'com.crossover'
-version = '0.0.1-SNAPSHOT'
+version = '1.0'
 sourceCompatibility = 1.8
 repositories {
     mavenCentral()
@@ -42,6 +42,6 @@ dependencies {
 	testCompile('org.springframework.boot:spring-boot-starter-aop')
 	testCompile('org.springframework.boot:spring-boot-starter-test')
 	testCompile('org.mockito:mockito-core:2.7.22')
+	testCompile('junit:junit:4.12')
 	
 }
-
diff --git a/src/main/java/com/crossover/techtrial/CrossLibraryApplication.java b/src/main/java/com/crossover/techtrial/CrossLibraryApplication.java
index 5b89652..8af3077 100644
--- a/src/main/java/com/crossover/techtrial/CrossLibraryApplication.java
+++ b/src/main/java/com/crossover/techtrial/CrossLibraryApplication.java
@@ -5,11 +5,10 @@ import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 /**
  * @author crossover
- *
  */
 @SpringBootApplication
 public class CrossLibraryApplication {
-  public static void main(String[] args) {
-    SpringApplication.run(CrossLibraryApplication.class, args);
-  }
+    public static void main(String[] args) {
+        SpringApplication.run(CrossLibraryApplication.class, args);
+    }
 }
diff --git a/src/main/java/com/crossover/techtrial/controller/BookController.java b/src/main/java/com/crossover/techtrial/controller/BookController.java
index a171514..ab306bf 100644
--- a/src/main/java/com/crossover/techtrial/controller/BookController.java
+++ b/src/main/java/com/crossover/techtrial/controller/BookController.java
@@ -1,9 +1,12 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.controller;
 
 import java.util.List;
+import java.util.Optional;
+
+import com.crossover.techtrial.repositories.BookRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -14,6 +17,9 @@ import org.springframework.web.bind.annotation.RestController;
 import com.crossover.techtrial.model.Book;
 import com.crossover.techtrial.service.BookService;
 
+import javax.swing.text.html.Option;
+import javax.validation.Valid;
+
 /**
  * BookController for Book related APIs.
  * @author crossover
@@ -21,36 +27,39 @@ import com.crossover.techtrial.service.BookService;
  */
 @RestController
 public class BookController {
-  
-  @Autowired 
-  private BookService bookService;
-  
-  /*
-   * PLEASE DO NOT CHANGE API SIGNATURE OR METHOD TYPE OF END POINTS
-   */
-  @GetMapping(path ="/api/book")
-  public ResponseEntity<List<Book>> getBooks() {
-    return ResponseEntity.ok(bookService.getAll());
-  }
-
-  /*
-   * PLEASE DO NOT CHANGE API SIGNATURE OR METHOD TYPE OF END POINTS
-   */
-  @PostMapping(path ="/api/book")
-  public ResponseEntity<Book> saveBook(@RequestBody Book book) {
-    return ResponseEntity.ok(bookService.save(book));
-  }
-  
-  /*
-   * PLEASE DO NOT CHANGE API SIGNATURE OR METHOD TYPE OF END POINTS
-   */
-  @GetMapping(path = "/api/book/{book-id}")
-  public ResponseEntity<Book> getRideById(@PathVariable(name="book-id",required=true)Long bookId){
-    Book book = bookService.findById(bookId);
-    if (book!=null)
-      return ResponseEntity.ok(book);
-    return ResponseEntity.notFound().build();
-  }
-
-  
+
+    @Autowired
+    private BookRepository bookRepository;
+
+    @Autowired
+    private BookService bookService;
+
+    /*
+     * PLEASE DO NOT CHANGE API SIGNATURE OR METHOD TYPE OF END POINTS
+     */
+    @GetMapping(path = "/api/book")
+    public ResponseEntity<List<Book>> getBooks() {
+        return ResponseEntity.ok(bookService.getAll());
+    }
+
+    /*
+     * PLEASE DO NOT CHANGE API SIGNATURE OR METHOD TYPE OF END POINTS
+     */
+    @PostMapping(path = "/api/book")
+    public ResponseEntity<Book> saveBook(@Valid  @RequestBody Book book) {
+        return ResponseEntity.ok(bookRepository.save(book));
+    }
+
+    /*
+     * PLEASE DO NOT CHANGE API SIGNATURE OR METHOD TYPE OF END POINTS
+     */
+    @GetMapping(path = "/api/book/{book-id}")
+    public ResponseEntity<Book> getBookById(@PathVariable(name = "book-id", required = true) Long bookId) {
+        Optional<Book> optionalBook = bookRepository.findById(bookId);
+        if (optionalBook.isPresent())
+            return ResponseEntity.ok(optionalBook.get());
+        return ResponseEntity.notFound().build();
+    }
+
+
 }
diff --git a/src/main/java/com/crossover/techtrial/controller/MemberController.java b/src/main/java/com/crossover/techtrial/controller/MemberController.java
index 7f613ce..14bde41 100644
--- a/src/main/java/com/crossover/techtrial/controller/MemberController.java
+++ b/src/main/java/com/crossover/techtrial/controller/MemberController.java
@@ -1,83 +1,85 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.controller;
 
-import java.time.LocalDateTime;
-import java.util.ArrayList;
-import java.util.List;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.format.annotation.DateTimeFormat;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RestController;
 import com.crossover.techtrial.dto.TopMemberDTO;
 import com.crossover.techtrial.model.Member;
+import com.crossover.techtrial.repositories.MemberRepository;
 import com.crossover.techtrial.service.MemberService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.format.annotation.DateTimeFormat;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.data.domain.PageRequest;
+
+import javax.validation.Valid;
+import java.time.LocalDateTime;
+import java.util.List;
+import java.util.Optional;
 
 /**
- * 
+ *
  * @author crossover
  */
 
 @RestController
 public class MemberController {
-  
-  @Autowired
-  MemberService memberService;
-  /*
-   * PLEASE DO NOT CHANGE SIGNATURE OR METHOD TYPE OF END POINTS
-   */
-  @PostMapping(path = "/api/member")
-  public ResponseEntity<Member> register(@RequestBody Member p) {
-    return ResponseEntity.ok(memberService.save(p));
-  }
-  
-  /*
-   * PLEASE DO NOT CHANGE API SIGNATURE OR METHOD TYPE OF END POINTS
-   */
-  @GetMapping(path = "/api/member")
-  public ResponseEntity<List<Member>> getAll() {
-    return ResponseEntity.ok(memberService.findAll());
-  }
-  
-  /*
-   * PLEASE DO NOT CHANGE API SIGNATURE OR METHOD TYPE OF END POINTS
-   */
-  @GetMapping(path = "/api/member/{member-id}")
-  public ResponseEntity<Member> getMemberById(@PathVariable(name="member-id", required=true)Long memberId) {
-    Member member = memberService.findById(memberId);
-    if (member != null) {
-      return ResponseEntity.ok(member);
+
+    @Autowired
+    MemberRepository memberRepository;
+
+    @Autowired
+    private MemberService memberService;
+
+    /*
+     * PLEASE DO NOT CHANGE SIGNATURE OR METHOD TYPE OF END POINTS
+     */
+    @PostMapping(path = "/api/member")
+    public ResponseEntity<Member> registerMember(@Valid @RequestBody Member p) {
+        return ResponseEntity.ok(memberRepository.save(p));
     }
-    return ResponseEntity.notFound().build();
-  }
-  
-  
-  /**
-   * This API returns the top 5 members who issued the most books within the search duration. 
-   * Only books that have dateOfIssue and dateOfReturn within the mentioned duration should be counted.
-   * Any issued book where dateOfIssue or dateOfReturn is outside the search, should not be considered. 
-   * 
-   * DONT CHANGE METHOD SIGNATURE AND RETURN TYPES
-   * @return
-   */
-  @GetMapping(path = "/api/member/top-member")
-  public ResponseEntity<List<TopMemberDTO>> getTopMembers(
-      @RequestParam(value="startTime", required=true) @DateTimeFormat(pattern="yyyy-MM-dd'T'HH:mm:ss") LocalDateTime startTime,
-      @RequestParam(value="endTime", required=true) @DateTimeFormat(pattern="yyyy-MM-dd'T'HH:mm:ss") LocalDateTime endTime){
-    List<TopMemberDTO> topDrivers = new ArrayList<>();
+
+    /*
+     * PLEASE DO NOT CHANGE API SIGNATURE OR METHOD TYPE OF END POINTS
+     */
+    @GetMapping(path = "/api/member")
+    public ResponseEntity<List<Member>> getAll() {
+        return ResponseEntity.ok(memberService.findAll());
+    }
+
+    /*
+     * PLEASE DO NOT CHANGE API SIGNATURE OR METHOD TYPE OF END POINTS
+     */
+    @GetMapping(path = "/api/member/{member-id}")
+    public ResponseEntity<Member> getMemberById(@PathVariable(name = "member-id", required = true) Long memberId) {
+        Optional<Member> optionalMember = memberRepository.findById(memberId);
+        if (optionalMember.isPresent()) {
+            return ResponseEntity.ok(optionalMember.get());
+        }
+        return ResponseEntity.notFound().build();
+    }
+
+
     /**
-     * Your Implementation Here. 
-     * 
+     * This API returns the top 5 members who issued the most books within the search duration.
+     * Only books that have dateOfIssue and dateOfReturn within the mentioned duration should be counted.
+     * Any issued book where dateOfIssue or dateOfReturn is outside the search, should not be considered.
+     *
+     * DONT CHANGE METHOD SIGNATURE AND RETURN TYPES
+     * @return
      */
-    
-    return ResponseEntity.ok(topDrivers);
-    
-  }
-  
+    @GetMapping(path = "/api/member/top-member")
+    public ResponseEntity<List<TopMemberDTO>> getTopMembers(
+            @RequestParam(value = "startTime", required = true) @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss") LocalDateTime startTime,
+            @RequestParam(value = "endTime", required = true) @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss") LocalDateTime endTime) {
+        // checks if startDate is >= than endTime
+        if (startTime.compareTo(endTime) >= 0) {
+            return ResponseEntity.badRequest().build();
+        }
+        List<TopMemberDTO> topDrivers = memberRepository.findTop5MemberList(startTime, endTime, PageRequest.of(0,5));
+        return ResponseEntity.ok(topDrivers);
+
+    }
+
 }
diff --git a/src/main/java/com/crossover/techtrial/controller/TransactionController.java b/src/main/java/com/crossover/techtrial/controller/TransactionController.java
index 83f41b8..96178d6 100644
--- a/src/main/java/com/crossover/techtrial/controller/TransactionController.java
+++ b/src/main/java/com/crossover/techtrial/controller/TransactionController.java
@@ -1,10 +1,14 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.controller;
 
 import java.time.LocalDateTime;
 import java.util.Map;
+import java.util.Optional;
+
+import com.crossover.techtrial.model.Book;
+import com.crossover.techtrial.model.MembershipStatus;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.PatchMapping;
@@ -23,35 +27,66 @@ import com.crossover.techtrial.repositories.TransactionRepository;
  */
 @RestController
 public class TransactionController {
-  
-  @Autowired TransactionRepository transactionRepository;
-  
-  @Autowired BookRepository bookRepository;
-  
-  @Autowired MemberRepository memberRepository;
-  /*
-   * PLEASE DO NOT CHANGE SIGNATURE OR METHOD TYPE OF END POINTS
-   * Example Post Request :  { "bookId":1,"memberId":33 }
-   */
-  @PostMapping(path = "/api/transaction")
-  public ResponseEntity<Transaction> issueBookToMember(@RequestBody Map<String, Long> params){
-    
-    Long bookId = params.get("bookId");
-    Long memberId = params.get("memberId");
-    Transaction transaction = new Transaction();
-    transaction.setBook(bookRepository.findById(bookId).orElse(null));
-    transaction.setMember(memberRepository.findById(memberId).get());
-    transaction.setDateOfIssue(LocalDateTime.now());    
-    return ResponseEntity.ok().body(transactionRepository.save(transaction));
-  }
-  /*
-   * PLEASE DO NOT CHANGE SIGNATURE OR METHOD TYPE OF END POINTS
-   */
-  @PatchMapping(path= "/api/transaction/{transaction-id}/return")
-  public ResponseEntity<Transaction> returnBookTransaction(@PathVariable(name="transaction-id") Long transactionId){
-    Transaction transaction = transactionRepository.findById(transactionId).get();
-    transaction.setDateOfReturn(LocalDateTime.now());
-    return ResponseEntity.ok().body(transaction);
-  }
+
+    @Autowired
+    TransactionRepository transactionRepository;
+
+    @Autowired
+    BookRepository bookRepository;
+
+    @Autowired
+    MemberRepository memberRepository;
+
+    /*
+     * PLEASE DO NOT CHANGE SIGNATURE OR METHOD TYPE OF END POINTS
+     * Example Post Request :  { "bookId":1,"memberId":33 }
+     */
+    @PostMapping(path = "/api/transaction")
+    public ResponseEntity<Transaction> issueBookToMember(@RequestBody Map<String, Long> params) {
+
+        Long bookId = params.get("bookId");
+        Long memberId = params.get("memberId");
+        Transaction transaction = new Transaction();
+        Optional<Book> optionalBook = bookRepository.findById(bookId);
+        // check if book ( bookId ) exists
+        if (!optionalBook.isPresent()) {
+            return ResponseEntity.notFound().build();
+        }
+        transaction.setBook(bookRepository.findById(bookId).get());
+        // check if already exists an active transaction for this book ( bookId )
+        if (transactionRepository.getByBookIdAndDateOfReturnIsNull(bookId).isPresent()) {
+            return ResponseEntity.status(403).build();
+        }
+        // check if member already has reached the book issuance limit number
+        if (transactionRepository.countByMemberIdAndDateOfReturnIsNull(memberId) >= 5) {
+            return ResponseEntity.status(403).build();
+        }
+        transaction.setMember(memberRepository.findById(memberId).get());
+        // check if membership is active
+        if (!transaction.getMember().getMembershipStatus().equals(MembershipStatus.ACTIVE)) {
+            return ResponseEntity.status(403).build();
+        }
+        transaction.setDateOfIssue(LocalDateTime.now());
+        return ResponseEntity.ok().body(transactionRepository.save(transaction));
+    }
+
+    /*
+     * PLEASE DO NOT CHANGE SIGNATURE OR METHOD TYPE OF END POINTS
+     */
+    @PatchMapping(path = "/api/transaction/{transaction-id}/return")
+    public ResponseEntity<Transaction> returnBookTransaction(@PathVariable(name = "transaction-id") Long transactionId) {
+        Optional<Transaction> optionalTransaction = transactionRepository.findById(transactionId);
+        // check if transaction ( transactionId ) exists
+        if (!optionalTransaction.isPresent()) {
+            return ResponseEntity.notFound().build();
+        }
+        // check if transaction ( transactionId ) is already closed
+        if (transactionRepository.getByIdAndDateOfReturnNotNull(transactionId).isPresent()) {
+            return ResponseEntity.status(403).build();
+        }
+        Transaction transaction = optionalTransaction.get();
+        transaction.setDateOfReturn(LocalDateTime.now());
+        return ResponseEntity.ok().body(transactionRepository.save(transaction));
+    }
 
 }
diff --git a/src/main/java/com/crossover/techtrial/dto/TopMemberDTO.java b/src/main/java/com/crossover/techtrial/dto/TopMemberDTO.java
index dd80ffd..256e63d 100644
--- a/src/main/java/com/crossover/techtrial/dto/TopMemberDTO.java
+++ b/src/main/java/com/crossover/techtrial/dto/TopMemberDTO.java
@@ -1,5 +1,5 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.dto;
 
@@ -8,65 +8,65 @@ package com.crossover.techtrial.dto;
  *
  */
 public class TopMemberDTO {
-  
-  /**
-   * Constructor for TopMemberDTO
-   * @param memberId
-   * @param name
-   * @param email
-   * @param bookCount
-   */
-  public TopMemberDTO(Long memberId,
-      String name, 
-      String email, 
-      Integer bookCount) {
-    this.name = name;
-    this.email = email;
-    this.memberId = memberId;
-    this.bookCount = bookCount;
-  }
-  
-  public TopMemberDTO() {
-    
-  }
-  
-  private Long memberId;
-  
-  private String name;
-  
-  private String email;
-  
-  private Integer bookCount;
-
-  public Long getMemberId() {
-    return memberId;
-  }
-
-  public void setMemberId(Long memberId) {
-    this.memberId = memberId;
-  }
-
-  public String getName() {
-    return name;
-  }
-
-  public void setName(String name) {
-    this.name = name;
-  }
-
-  public String getEmail() {
-    return email;
-  }
-
-  public void setEmail(String email) {
-    this.email = email;
-  }
-
-  public Integer getBookCount() {
-    return bookCount;
-  }
-
-  public void setBookCount(Integer bookCount) {
-    this.bookCount = bookCount;
-  }
+
+    private Long memberId;
+
+    private String name;
+
+    private String email;
+
+    private long bookCount;
+
+    public TopMemberDTO() {
+
+    }
+
+    /**
+     * Constructor for TopMemberDTO
+     * @param memberId
+     * @param name
+     * @param email
+     * @param bookCount
+     */
+    public TopMemberDTO(Long memberId,
+                        String name,
+                        String email,
+                        long bookCount) {
+        this.name = name;
+        this.email = email;
+        this.memberId = memberId;
+        this.bookCount = bookCount;
+    }
+
+    public Long getMemberId() {
+        return memberId;
+    }
+
+    public void setMemberId(Long memberId) {
+        this.memberId = memberId;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public long getBookCount() {
+        return bookCount;
+    }
+
+    public void setBookCount(long bookCount) {
+        this.bookCount = bookCount;
+    }
 }
diff --git a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
index e39127a..d8a4fcd 100644
--- a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
+++ b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
@@ -1,6 +1,7 @@
 package com.crossover.techtrial.exceptions;
 
 import java.util.AbstractMap;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpStatus;
@@ -13,17 +14,17 @@ import org.springframework.web.bind.annotation.ExceptionHandler;
 @Component
 public class GlobalExceptionHandler {
 
-  private static final Logger LOG = LoggerFactory.getLogger(GlobalExceptionHandler.class);
+    private static final Logger LOG = LoggerFactory.getLogger(GlobalExceptionHandler.class);
 
-  /**
-   * Global Exception handler for all exceptions.
-   */
-  @ExceptionHandler
-  public ResponseEntity<AbstractMap.SimpleEntry<String, String>> handle(Exception exception) {
-    // general exception
-    LOG.error("Exception: Unable to process this request. ", exception);
-    AbstractMap.SimpleEntry<String, String> response =
-        new AbstractMap.SimpleEntry<>("message", "Unable to process this request.");
-    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
-  }
+    /**
+     * Global Exception handler for all exceptions.
+     */
+    @ExceptionHandler
+    public ResponseEntity<AbstractMap.SimpleEntry<String, String>> handle(Exception exception) {
+        // general exception
+        LOG.error("Exception: Unable to process this request. ", exception);
+        AbstractMap.SimpleEntry<String, String> response =
+                new AbstractMap.SimpleEntry<>("message", "Unable to process this request.");
+        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
+    }
 }
diff --git a/src/main/java/com/crossover/techtrial/model/Book.java b/src/main/java/com/crossover/techtrial/model/Book.java
index b0ecd65..21b13a8 100644
--- a/src/main/java/com/crossover/techtrial/model/Book.java
+++ b/src/main/java/com/crossover/techtrial/model/Book.java
@@ -1,5 +1,5 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.model;
 
@@ -10,6 +10,7 @@ import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.Table;
+import javax.validation.constraints.NotEmpty;
 
 /**
  * @author kshah
@@ -17,72 +18,71 @@ import javax.persistence.Table;
  */
 @Entity
 @Table(name = "book")
-public class Book implements Serializable{
+public class Book implements Serializable {
+
+    /**
+     *
+     */
+    private static final long serialVersionUID = -5241781253380015253L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    Long id;
+
+    @Column(name = "title")
+    String title;
 
-  /**
-   * 
-   */
-  private static final long serialVersionUID = -5241781253380015253L;
-  
-  @Id
-  @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
+    public Long getId() {
+        return id;
+    }
 
-  @Column(name = "title")
-  String title;
+    public void setId(Long id) {
+        this.id = id;
+    }
 
-  public Long getId() {
-    return id;
-  }
+    public String getTitle() {
+        return title;
+    }
 
-  public void setId(Long id) {
-    this.id = id;
-  }
+    public void setTitle(String title) {
+        this.title = title;
+    }
 
-  public String getTitle() {
-    return title;
-  }
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((id == null) ? 0 : id.hashCode());
+        result = prime * result + ((title == null) ? 0 : title.hashCode());
+        return result;
+    }
 
-  public void setTitle(String title) {
-    this.title = title;
-  }
-  
-  @Override
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result + ((id == null) ? 0 : id.hashCode());
-    result = prime * result + ((title == null) ? 0 : title.hashCode());
-    return result;
-  }
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+        if (getClass() != obj.getClass())
+            return false;
+        Book other = (Book) obj;
+        if (id == null) {
+            if (other.id != null)
+                return false;
+        } else if (!id.equals(other.id))
+            return false;
+        if (title == null) {
+            if (other.title != null)
+                return false;
+        } else if (!title.equals(other.title))
+            return false;
+        return true;
+    }
 
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj)
-      return true;
-    if (obj == null)
-      return false;
-    if (getClass() != obj.getClass())
-      return false;
-    Book other = (Book) obj;
-    if (id == null) {
-      if (other.id != null)
-        return false;
-    } else if (!id.equals(other.id))
-      return false;
-    if (title == null) {
-      if (other.title != null)
-        return false;
-    } else if (!title.equals(other.title))
-      return false;
-    return true;
-  }
+    @Override
+    public String toString() {
+        return "Book [id=" + id + ", title=" + title + "]";
+    }
 
-  @Override
-  public String toString() {
-    return "Book [id=" + id + ", title=" + title + "]";
-  }
-  
-  
 
 }
diff --git a/src/main/java/com/crossover/techtrial/model/Member.java b/src/main/java/com/crossover/techtrial/model/Member.java
index 99cfb29..d4aa1c8 100644
--- a/src/main/java/com/crossover/techtrial/model/Member.java
+++ b/src/main/java/com/crossover/techtrial/model/Member.java
@@ -1,8 +1,10 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.model;
 
+import org.hibernate.validator.constraints.Length;
+
 import java.io.Serializable;
 import java.time.LocalDateTime;
 import javax.persistence.Column;
@@ -13,6 +15,8 @@ import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.Table;
+import javax.validation.constraints.NotEmpty;
+import javax.validation.constraints.Pattern;
 
 /**
  * @author kshah
@@ -20,109 +24,111 @@ import javax.persistence.Table;
  */
 @Entity
 @Table(name = "member")
-public class Member implements Serializable{
-  
-  private static final long serialVersionUID = 9045098179799205444L;
-  
-  @Id
-  @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
-
-  @Column(name = "name")
-  String name;
-
-  @Column(name = "email")
-  String email;
-  
-  @Enumerated(EnumType.STRING)
-  MembershipStatus membershipStatus;
-  
-  @Column(name = "membership_start_date")
-  LocalDateTime membershipStartDate;
-
-  public Long getId() {
-    return id;
-  }
-
-  public void setId(Long id) {
-    this.id = id;
-  }
-
-  public String getName() {
-    return name;
-  }
-
-  public void setName(String name) {
-    this.name = name;
-  }
-
-  public String getEmail() {
-    return email;
-  }
-
-  public void setEmail(String email) {
-    this.email = email;
-  }
-
-  public MembershipStatus getMembershipStatus() {
-    return membershipStatus;
-  }
-
-  public void setMembershipStatus(MembershipStatus membershipStatus) {
-    this.membershipStatus = membershipStatus;
-  }
-
-  public LocalDateTime getMembershipStartDate() {
-    return membershipStartDate;
-  }
-
-  public void setMembershipStartDate(LocalDateTime membershipStartDate) {
-    this.membershipStartDate = membershipStartDate;
-  }
-
-  @Override
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result + ((email == null) ? 0 : email.hashCode());
-    result = prime * result + ((id == null) ? 0 : id.hashCode());
-    result = prime * result + ((name == null) ? 0 : name.hashCode());
-    return result;
-  }
-
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj)
-      return true;
-    if (obj == null)
-      return false;
-    if (getClass() != obj.getClass())
-      return false;
-    Member other = (Member) obj;
-    if (email == null) {
-      if (other.email != null)
-        return false;
-    } else if (!email.equals(other.email))
-      return false;
-    if (id == null) {
-      if (other.id != null)
-        return false;
-    } else if (!id.equals(other.id))
-      return false;
-    if (name == null) {
-      if (other.name != null)
-        return false;
-    } else if (!name.equals(other.name))
-      return false;
-    return true;
-  }
-
-  @Override
-  public String toString() {
-    return "Member [id=" + id + ", name=" + name + ", email=" + email + "]";
-  }
-  
-  
-  
+public class Member implements Serializable {
+
+    private static final long serialVersionUID = 9045098179799205444L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    Long id;
+
+    @Column(name = "name")
+    @Length(min = 2, max = 100, message = "The name must be composed by 2 - 100 characters")
+    @Pattern(regexp = "^[a-zA-Z]+[A-Za-z ,.'-]+$", message = "The name format is not valid")
+    String name;
+
+    @Column(name = "email", unique = true)
+    @NotEmpty
+    String email;
+
+    @Column(name = "membership_status")
+    @Enumerated(EnumType.STRING)
+    MembershipStatus membershipStatus;
+
+    @Column(name = "membership_start_date")
+    LocalDateTime membershipStartDate;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public MembershipStatus getMembershipStatus() {
+        return membershipStatus;
+    }
+
+    public void setMembershipStatus(MembershipStatus membershipStatus) {
+        this.membershipStatus = membershipStatus;
+    }
+
+    public LocalDateTime getMembershipStartDate() {
+        return membershipStartDate;
+    }
+
+    public void setMembershipStartDate(LocalDateTime membershipStartDate) {
+        this.membershipStartDate = membershipStartDate;
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((email == null) ? 0 : email.hashCode());
+        result = prime * result + ((id == null) ? 0 : id.hashCode());
+        result = prime * result + ((name == null) ? 0 : name.hashCode());
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+        if (getClass() != obj.getClass())
+            return false;
+        Member other = (Member) obj;
+        if (email == null) {
+            if (other.email != null)
+                return false;
+        } else if (!email.equals(other.email))
+            return false;
+        if (id == null) {
+            if (other.id != null)
+                return false;
+        } else if (!id.equals(other.id))
+            return false;
+        if (name == null) {
+            if (other.name != null)
+                return false;
+        } else if (!name.equals(other.name))
+            return false;
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "Member [id=" + id + ", name=" + name + ", email=" + email + "]";
+    }
+
 
 }
diff --git a/src/main/java/com/crossover/techtrial/model/MembershipStatus.java b/src/main/java/com/crossover/techtrial/model/MembershipStatus.java
index 38f1533..4e089a0 100644
--- a/src/main/java/com/crossover/techtrial/model/MembershipStatus.java
+++ b/src/main/java/com/crossover/techtrial/model/MembershipStatus.java
@@ -1,5 +1,5 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.model;
 
@@ -8,7 +8,7 @@ package com.crossover.techtrial.model;
  *
  */
 public enum MembershipStatus {
-  ACTIVE,
-  INACTIVE,
-  BLOCKED
+    ACTIVE,
+    INACTIVE,
+    BLOCKED
 }
diff --git a/src/main/java/com/crossover/techtrial/model/Transaction.java b/src/main/java/com/crossover/techtrial/model/Transaction.java
index 4a9a262..e2e9ea3 100644
--- a/src/main/java/com/crossover/techtrial/model/Transaction.java
+++ b/src/main/java/com/crossover/techtrial/model/Transaction.java
@@ -1,5 +1,5 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.model;
 
@@ -20,76 +20,76 @@ import javax.persistence.Table;
  *
  */
 @Entity
-@Table(name="transaction")
+@Table(name = "transaction")
 public class Transaction implements Serializable {
 
-  /**
-   * 
-   */
-  private static final long serialVersionUID = 8951221480021840448L;
-  
-  @Id
-  @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
-  
-  @OneToOne
-  @JoinColumn(name = "book_id", referencedColumnName = "id")
-  Book book;
-  
-  @OneToOne
-  @JoinColumn(name="member_id", referencedColumnName="id")
-  Member member;
-  //Date and time of issuance of this book
-  @Column(name="date_of_issue")
-  LocalDateTime dateOfIssue;
-  
-  //Date and time of return of this book
-  @Column(name="date_of_return")
-  LocalDateTime dateOfReturn;
-
-  public Long getId() {
-    return id;
-  }
-
-  public void setId(Long id) {
-    this.id = id;
-  }
-
-  public Book getBook() {
-    return book;
-  }
-
-  public void setBook(Book book) {
-    this.book = book;
-  }
-
-  public Member getMember() {
-    return member;
-  }
-
-  public void setMember(Member member) {
-    this.member = member;
-  }
-
-  public LocalDateTime getDateOfIssue() {
-    return dateOfIssue;
-  }
-
-  public void setDateOfIssue(LocalDateTime dateOfIssue) {
-    this.dateOfIssue = dateOfIssue;
-  }
-
-  public LocalDateTime getDateOfReturn() {
-    return dateOfReturn;
-  }
-
-  public void setDateOfReturn(LocalDateTime dateOfReturn) {
-    this.dateOfReturn = dateOfReturn;
-  }
-
-  @Override
-  public String toString() {
-    return "Transaction [id=" + id + ", book=" + book + ", member=" + member + ", dateOfIssue=" + dateOfIssue + ", dateOfReturn=" + dateOfReturn + "]";
-  }
+    /**
+     *
+     */
+    private static final long serialVersionUID = 8951221480021840448L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    Long id;
+
+    @OneToOne
+    @JoinColumn(name = "book_id", referencedColumnName = "id")
+    Book book;
+
+    @OneToOne
+    @JoinColumn(name = "member_id", referencedColumnName = "id")
+    Member member;
+    //Date and time of issuance of this book
+    @Column(name = "date_of_issue")
+    LocalDateTime dateOfIssue;
+
+    //Date and time of return of this book
+    @Column(name = "date_of_return")
+    LocalDateTime dateOfReturn;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Book getBook() {
+        return book;
+    }
+
+    public void setBook(Book book) {
+        this.book = book;
+    }
+
+    public Member getMember() {
+        return member;
+    }
+
+    public void setMember(Member member) {
+        this.member = member;
+    }
+
+    public LocalDateTime getDateOfIssue() {
+        return dateOfIssue;
+    }
+
+    public void setDateOfIssue(LocalDateTime dateOfIssue) {
+        this.dateOfIssue = dateOfIssue;
+    }
+
+    public LocalDateTime getDateOfReturn() {
+        return dateOfReturn;
+    }
+
+    public void setDateOfReturn(LocalDateTime dateOfReturn) {
+        this.dateOfReturn = dateOfReturn;
+    }
+
+    @Override
+    public String toString() {
+        return "Transaction [id=" + id + ", book=" + book + ", member=" + member + ", dateOfIssue=" + dateOfIssue + ", dateOfReturn=" + dateOfReturn + "]";
+    }
 
 }
diff --git a/src/main/java/com/crossover/techtrial/repositories/BookRepository.java b/src/main/java/com/crossover/techtrial/repositories/BookRepository.java
index 0366c26..2296645 100644
--- a/src/main/java/com/crossover/techtrial/repositories/BookRepository.java
+++ b/src/main/java/com/crossover/techtrial/repositories/BookRepository.java
@@ -1,5 +1,5 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.repositories;
 
diff --git a/src/main/java/com/crossover/techtrial/repositories/MemberRepository.java b/src/main/java/com/crossover/techtrial/repositories/MemberRepository.java
index 303d98a..1d9edc3 100644
--- a/src/main/java/com/crossover/techtrial/repositories/MemberRepository.java
+++ b/src/main/java/com/crossover/techtrial/repositories/MemberRepository.java
@@ -1,20 +1,36 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.repositories;
 
-import java.util.List;
-import java.util.Optional;
-import org.springframework.data.repository.PagingAndSortingRepository;
-import org.springframework.data.rest.core.annotation.RestResource;
+import com.crossover.techtrial.dto.TopMemberDTO;
 import com.crossover.techtrial.model.Member;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.CrudRepository;
+import org.springframework.data.rest.core.annotation.RestResource;
+
+import org.springframework.data.domain.Pageable;
+import java.time.LocalDateTime;
+import java.util.List;
 
 /**
- * Person repository for basic operations on Person entity.
+ * Person repository for basic operations on Member entity.
  * @author crossover
  */
-@RestResource(exported=false)
-public interface MemberRepository extends PagingAndSortingRepository<Member, Long> {
-  Optional<Member> findById(Long id);
-  List<Member> findAll();
+@RestResource(exported = false)
+public interface MemberRepository extends CrudRepository<Member, Long> {
+
+    @Query("SELECT " +
+            "    new com.crossover.techtrial.dto.TopMemberDTO(t.member.id, t.member.name, t.member.email, COUNT(t.member.id)) " +
+            "FROM " +
+            "    Transaction t " +
+            "WHERE " +
+            "    t.dateOfIssue BETWEEN ?1 AND ?2 AND " +
+            "    t.dateOfReturn BETWEEN ?1 AND ?2 " +
+            "GROUP BY " +
+            "    t.member.id, t.member.name, t.member.email " +
+            "ORDER BY " +
+            "    COUNT(t.member.id) DESC")
+    List<TopMemberDTO> findTop5MemberList(LocalDateTime startTime, LocalDateTime endTime, Pageable pageable);
+
 }
diff --git a/src/main/java/com/crossover/techtrial/repositories/TransactionRepository.java b/src/main/java/com/crossover/techtrial/repositories/TransactionRepository.java
index cba1dbe..89dc99f 100644
--- a/src/main/java/com/crossover/techtrial/repositories/TransactionRepository.java
+++ b/src/main/java/com/crossover/techtrial/repositories/TransactionRepository.java
@@ -1,5 +1,5 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.repositories;
 
@@ -7,6 +7,9 @@ import com.crossover.techtrial.model.Transaction;
 import org.springframework.data.repository.CrudRepository;
 import org.springframework.data.rest.core.annotation.RestResource;
 
+import java.time.LocalDateTime;
+import java.util.Optional;
+
 /**
  * @author crossover
  *
@@ -14,4 +17,10 @@ import org.springframework.data.rest.core.annotation.RestResource;
 @RestResource(exported = false)
 public interface TransactionRepository extends CrudRepository<Transaction, Long> {
 
+    Optional<Transaction> getByBookIdAndDateOfReturnIsNull(Long bookId);
+
+    Optional<Transaction> getByIdAndDateOfReturnNotNull(Long transactionId);
+
+    long countByMemberIdAndDateOfReturnIsNull(Long memberId);
+
 }
diff --git a/src/main/java/com/crossover/techtrial/service/BookService.java b/src/main/java/com/crossover/techtrial/service/BookService.java
index 00dbba7..7b9afa7 100644
--- a/src/main/java/com/crossover/techtrial/service/BookService.java
+++ b/src/main/java/com/crossover/techtrial/service/BookService.java
@@ -1,9 +1,10 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.service;
 
 import java.util.List;
+
 import com.crossover.techtrial.model.Book;
 
 /**
@@ -12,11 +13,7 @@ import com.crossover.techtrial.model.Book;
  *
  */
 public interface BookService {
-  
-  public List<Book> getAll();
-  
-  public Book save(Book p);
-  
-  public Book findById(Long bookId);
-  
+
+    public List<Book> getAll();
+
 }
diff --git a/src/main/java/com/crossover/techtrial/service/BookServiceImpl.java b/src/main/java/com/crossover/techtrial/service/BookServiceImpl.java
index a8422db..e1833c1 100644
--- a/src/main/java/com/crossover/techtrial/service/BookServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/BookServiceImpl.java
@@ -1,11 +1,12 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.service;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import com.crossover.techtrial.model.Book;
@@ -17,30 +18,16 @@ import com.crossover.techtrial.repositories.TransactionRepository;
  *
  */
 @Service
-public class BookServiceImpl implements BookService{
+public class BookServiceImpl implements BookService {
 
-  @Autowired
-  BookRepository bookRepository;
-  
-  @Autowired
-  TransactionRepository transactionRepository;
-  
-  @Override
-  public List<Book> getAll() {
-    List<Book> personList = new ArrayList<>();
-    bookRepository.findAll().forEach(personList::add);
-    return personList;
-    
-  }
-  
-  public Book save(Book p) {
-    return bookRepository.save(p);
-  }
+    @Autowired
+    BookRepository bookRepository;
 
-  @Override
-  public Book findById(Long bookId) {
-    Optional<Book> dbPerson = bookRepository.findById(bookId);
-    return dbPerson.orElse(null);
-  }
+    @Override
+    public List<Book> getAll() {
+        List<Book> bookList = new ArrayList<>();
+        bookRepository.findAll().forEach(bookList::add);
+        return bookList;
+    }
 
 }
diff --git a/src/main/java/com/crossover/techtrial/service/MemberService.java b/src/main/java/com/crossover/techtrial/service/MemberService.java
index a4fe6ce..78501be 100644
--- a/src/main/java/com/crossover/techtrial/service/MemberService.java
+++ b/src/main/java/com/crossover/techtrial/service/MemberService.java
@@ -1,9 +1,10 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.service;
 
 import java.util.List;
+
 import com.crossover.techtrial.model.Member;
 
 /**
@@ -12,11 +13,7 @@ import com.crossover.techtrial.model.Member;
  *
  */
 public interface MemberService {
-  
-  public Member save(Member member);
-  
-  public Member findById(Long memberId);
-  
-  public List<Member> findAll();
-  
+
+    public List<Member> findAll();
+
 }
diff --git a/src/main/java/com/crossover/techtrial/service/MemberServiceImpl.java b/src/main/java/com/crossover/techtrial/service/MemberServiceImpl.java
index 5fbf1a1..b850bb8 100644
--- a/src/main/java/com/crossover/techtrial/service/MemberServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/MemberServiceImpl.java
@@ -1,10 +1,13 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.service;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
+
+import com.crossover.techtrial.model.Book;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import com.crossover.techtrial.model.Member;
@@ -15,24 +18,15 @@ import com.crossover.techtrial.repositories.MemberRepository;
  *
  */
 @Service
-public class MemberServiceImpl implements MemberService{
+public class MemberServiceImpl implements MemberService {
+
+    @Autowired
+    MemberRepository memberRepository;
 
-  @Autowired
-  MemberRepository memberRepository;
-  
-  public Member save(Member member) {
-    return memberRepository.save(member);
-  }
-  
-  public Member findById(Long memberId) {
-    Optional<Member> optionalMember = memberRepository.findById(memberId);
-    if (optionalMember.isPresent()) {
-      return optionalMember.get();
-    }else return null;
-  }
-  
-  public List<Member> findAll() {
-    return memberRepository.findAll();
-  }
+    public List<Member> findAll() {
+        List<Member> memberList = new ArrayList<>();
+        memberRepository.findAll().forEach(memberList::add);
+        return memberList;
+    }
 
 }
diff --git a/src/main/main.iml b/src/main/main.iml
new file mode 100644
index 0000000..908ad4f
--- /dev/null
+++ b/src/main/main.iml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/java" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/src/main/resources/db/changelog/db.changelog-1.0.xml b/src/main/resources/db/changelog/db.changelog-1.0.xml
index e4e52fe..48e606d 100644
--- a/src/main/resources/db/changelog/db.changelog-1.0.xml
+++ b/src/main/resources/db/changelog/db.changelog-1.0.xml
@@ -32,7 +32,7 @@
             onUpdate="RESTRICT"
             referencedColumnNames="id"
             referencedTableName="book"/>
-          <addForeignKeyConstraint baseColumnNames="member_id"
+        <addForeignKeyConstraint baseColumnNames="member_id"
             baseTableName="transaction"
             constraintName="fk_transaction_member"
             onDelete="CASCADE"
diff --git a/src/main/resources/db/changelog/db.changelog-2.0.xml b/src/main/resources/db/changelog/db.changelog-2.0.xml
new file mode 100644
index 0000000..de6bf61
--- /dev/null
+++ b/src/main/resources/db/changelog/db.changelog-2.0.xml
@@ -0,0 +1,8 @@
+<?xml version="1.1" encoding="UTF-8" standalone="no"?>
+<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <changeSet author="fdelgado" id="1001122002_alter_tables">
+        <addUniqueConstraint columnNames="email"
+                             constraintName="uq_email"
+                             tableName="member"/>
+    </changeSet>
+</databaseChangeLog>
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
index ea61ac5..6a5bd6e 100644
--- a/src/main/resources/db/changelog/db.changelog-master.xml
+++ b/src/main/resources/db/changelog/db.changelog-master.xml
@@ -2,5 +2,5 @@
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">
-  <include file="db/changelog/db.changelog-1.0.xml"/>
+  <include file="db/changelog/db.changelog-2.0.xml"/>
 </databaseChangeLog>
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/controller/BookControllerTest.java b/src/test/java/com/crossover/techtrial/controller/BookControllerTest.java
new file mode 100644
index 0000000..fc2484e
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/controller/BookControllerTest.java
@@ -0,0 +1,105 @@
+package com.crossover.techtrial.controller;
+
+import com.crossover.techtrial.model.Book;
+import com.crossover.techtrial.repositories.BookRepository;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.web.client.TestRestTemplate;
+import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class BookControllerTest {
+
+    MockMvc mockMvc;
+
+    @Mock
+    private BookController bookController;
+
+    @Autowired
+    private TestRestTemplate template;
+
+    @Autowired
+    BookRepository bookRepository;
+
+    @Before
+    public void setup() throws Exception {
+        mockMvc = MockMvcBuilders.standaloneSetup(bookController).build();
+    }
+
+    @Test
+    public void testBookRegistrationSuccessful() throws Exception {
+        HttpEntity<Object> book = getHttpEntity(
+                "{\"title\": \"Book X\" }");
+
+        ResponseEntity<Book> response = template.postForEntity(
+                "/api/book", book, Book.class);
+
+        Assert.assertEquals("Book X", response.getBody().getTitle());
+        Assert.assertEquals(200, response.getStatusCode().value());
+
+        //cleanup the book
+        bookRepository.deleteById(response.getBody().getId());
+    }
+
+    @Test
+    public void getBookByIdSuccessfully() throws Exception {
+
+        HttpEntity<Object> book = getHttpEntity(
+                "{\"title\": \"Book X\" }");
+
+        ResponseEntity<Book> response = template.postForEntity(
+                "/api/book", book, Book.class);
+
+        Assert.assertEquals("Book X", response.getBody().getTitle());
+        Assert.assertEquals(200, response.getStatusCode().value());
+
+
+        Book m = template.getForObject("/api/book/"+response.getBody().getId(), Book.class);
+
+        Assert.assertEquals("Book X", m.getTitle());
+
+        //cleanup the book
+        bookRepository.deleteById(response.getBody().getId());
+
+    }
+
+    @Test
+    public void getAllBooksSuccessfully() throws Exception {
+
+        HttpEntity<Object> book = getHttpEntity(
+                "{\"title\": \"Book X\" }");
+
+        ResponseEntity<Book> response = template.postForEntity(
+                "/api/book", book, Book.class);
+
+        Assert.assertEquals("Book X", response.getBody().getTitle());
+        Assert.assertEquals(200, response.getStatusCode().value());
+
+        ResponseEntity<Book[]> responseEntity = template.getForEntity("/api/book", Book[].class);
+
+        Assert.assertTrue((responseEntity.getBody().length > 0));
+
+        //cleanup the book
+        bookRepository.deleteById(response.getBody().getId());
+
+    }
+
+    private HttpEntity<Object> getHttpEntity(Object body) {
+        HttpHeaders headers = new HttpHeaders();
+        headers.setContentType(MediaType.APPLICATION_JSON);
+        return new HttpEntity<Object>(body, headers);
+    }
+
+}
diff --git a/src/test/java/com/crossover/techtrial/controller/MemberControllerTest.java b/src/test/java/com/crossover/techtrial/controller/MemberControllerTest.java
index 0368a7e..5577273 100644
--- a/src/test/java/com/crossover/techtrial/controller/MemberControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/MemberControllerTest.java
@@ -1,5 +1,5 @@
 /**
- * 
+ *
  */
 package com.crossover.techtrial.controller;
 
@@ -12,16 +12,24 @@ import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.test.web.client.TestRestTemplate;
-import org.springframework.http.HttpEntity;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
+import org.springframework.core.ParameterizedTypeReference;
+import org.springframework.http.*;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 import com.crossover.techtrial.model.Member;
 import com.crossover.techtrial.repositories.MemberRepository;
 
+import static org.hamcrest.Matchers.containsString;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+import java.util.List;
+
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
 /**
  * @author kshah
  *
@@ -29,43 +37,149 @@ import com.crossover.techtrial.repositories.MemberRepository;
 @RunWith(SpringJUnit4ClassRunner.class)
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
 public class MemberControllerTest {
-  
-  MockMvc mockMvc;
-  
-  @Mock
-  private MemberController memberController;
-  
-  @Autowired
-  private TestRestTemplate template;
-  
-  @Autowired
-  MemberRepository memberRepository;
-  
-  @Before
-  public void setup() throws Exception {
-    mockMvc = MockMvcBuilders.standaloneSetup(memberController).build();
-  }
-  
-  @Test
-  public void testMemberRegsitrationsuccessful() throws Exception {
-    HttpEntity<Object> member = getHttpEntity(
-        "{\"name\": \"test 1\", \"email\": \"test10000000000001@gmail.com\"," 
-            + " \"membershipStatus\": \"ACTIVE\",\"membershipStartDate\":\"2018-08-08T12:12:12\" }");
-    
-    ResponseEntity<Member> response = template.postForEntity(
-        "/api/member", member, Member.class);
-    
-    Assert.assertEquals("test 1", response.getBody().getName());
-    Assert.assertEquals(200,response.getStatusCode().value());
-    
-    //cleanup the user
-    memberRepository.deleteById(response.getBody().getId());
-  }
-
-  private HttpEntity<Object> getHttpEntity(Object body) {
-    HttpHeaders headers = new HttpHeaders();
-    headers.setContentType(MediaType.APPLICATION_JSON);
-    return new HttpEntity<Object>(body, headers);
-  }
+
+    MockMvc mockMvc;
+
+    @Mock
+    private MemberController memberController;
+
+    @Autowired
+    private TestRestTemplate template;
+
+    @Autowired
+    MemberRepository memberRepository;
+
+    @Before
+    public void setup() throws Exception {
+        mockMvc = MockMvcBuilders.standaloneSetup(memberController).build();
+    }
+
+    @Test
+    public void testMemberRegistrationSuccessful() throws Exception {
+        HttpEntity<Object> member = getHttpEntity(
+                "{\"name\": \"Elon Musk\", \"email\": \"emuskmember@gmail.com\","
+                        + " \"membershipStatus\": \"ACTIVE\",\"membershipStartDate\":\"2018-12-15T12:12:12\" }");
+
+        ResponseEntity<Member> response = template.postForEntity(
+                "/api/member", member, Member.class);
+
+        Assert.assertEquals("Elon Musk", response.getBody().getName());
+        Assert.assertEquals(200, response.getStatusCode().value());
+
+        //cleanup the user
+        memberRepository.deleteById(response.getBody().getId());
+    }
+
+    @Test
+    public void testMemberDuplicatedEmailOnRegistration() throws Exception {
+        HttpEntity<Object> member1 = getHttpEntity(
+                "{\"name\": \"Elon Musk\", \"email\": \"emuskmember@gmail.com\","
+                        + " \"membershipStatus\": \"ACTIVE\",\"membershipStartDate\":\"2018-12-15T12:12:12\" }");
+
+        HttpEntity<Object> member2 = getHttpEntity(
+                "{\"name\": \"Larry Page\", \"email\": \"emuskmember@gmail.com\","
+                        + " \"membershipStatus\": \"ACTIVE\",\"membershipStartDate\":\"2018-12-15T12:12:12\" }");
+
+        ResponseEntity<Member> response1= template.postForEntity(
+                "/api/member", member1, Member.class);
+
+        Assert.assertEquals("Elon Musk", response1.getBody().getName());
+        Assert.assertEquals(200, response1.getStatusCode().value());
+
+        ResponseEntity<Member> response2 = template.postForEntity(
+                "/api/member", member2, Member.class);
+
+        Assert.assertEquals(400, response2.getStatusCode().value());
+
+        //cleanup the user
+        memberRepository.deleteById(response1.getBody().getId());
+    }
+
+    @Test
+    public void testWrongNameStartOnRegistration() throws Exception {
+        HttpEntity<Object> member = getHttpEntity(
+                "{\"name\": \"1Elon Musk\", \"email\": \"emuskmember@gmail.com\","
+                        + " \"membershipStatus\": \"ACTIVE\",\"membershipStartDate\":\"2018-12-15T12:12:12\" }");
+
+        ResponseEntity<Member> response = template.postForEntity(
+                "/api/member", member, Member.class);
+
+        Assert.assertEquals(400, response.getStatusCode().value());
+    }
+
+    @Test
+    public void testTooShortNameOnRegistration() throws Exception {
+        HttpEntity<Object> member = getHttpEntity(
+                "{\"name\": \"a\", \"email\": \"emuskmember@gmail.com\","
+                        + " \"membershipStatus\": \"ACTIVE\",\"membershipStartDate\":\"2018-12-15T12:12:12\" }");
+
+        ResponseEntity<Member> response = template.postForEntity(
+                "/api/member", member, Member.class);
+
+        Assert.assertEquals(400, response.getStatusCode().value());
+    }
+
+    @Test
+    public void testTooLongNameOnRegistration() throws Exception {
+        HttpEntity<Object> member = getHttpEntity(
+                "{\"name\": \"asdasdasd asdas dasda sdas dasdasd asdasdadasdasdasd" +
+                        " asd as dasdadadasdas asdasdasdas asdasdasdasdaax\", \"email\": \"emuskmember@gmail.com\","
+                        + " \"membershipStatus\": \"ACTIVE\",\"membershipStartDate\":\"2018-12-15T12:12:12\" }");
+
+        ResponseEntity<Member> response = template.postForEntity(
+                "/api/member", member, Member.class);
+
+        Assert.assertEquals(400, response.getStatusCode().value());
+    }
+
+    @Test
+    public void getMemberByIdSuccessfully() throws Exception {
+
+        HttpEntity<Object> member = getHttpEntity(
+                "{\"name\": \"Morgan Freeman\", \"email\": \"mfreeman@gmail.com\","
+                        + " \"membershipStatus\": \"ACTIVE\",\"membershipStartDate\":\"2018-12-15T12:12:12\" }");
+
+        ResponseEntity<Member> response = template.postForEntity(
+                "/api/member", member, Member.class);
+
+        Assert.assertEquals("Morgan Freeman", response.getBody().getName());
+        Assert.assertEquals(200, response.getStatusCode().value());
+
+        Member m = template.getForObject("/api/member/"+response.getBody().getId(), Member.class);
+
+        Assert.assertEquals("Morgan Freeman", m.getName());
+
+        //cleanup the user
+        memberRepository.deleteById(response.getBody().getId());
+
+    }
+
+    @Test
+    public void getAllMembersSuccessfully() throws Exception {
+
+        HttpEntity<Object> member = getHttpEntity(
+                "{\"name\": \"Morgan Freeman\", \"email\": \"mfreeman@gmail.com\","
+                        + " \"membershipStatus\": \"ACTIVE\",\"membershipStartDate\":\"2018-12-15T12:12:12\" }");
+
+        ResponseEntity<Member> response = template.postForEntity(
+                "/api/member", member, Member.class);
+
+        Assert.assertEquals("Morgan Freeman", response.getBody().getName());
+        Assert.assertEquals(200, response.getStatusCode().value());
+
+        ResponseEntity<Member[]> responseEntity = template.getForEntity("/api/member", Member[].class);
+
+        Assert.assertTrue((responseEntity.getBody().length > 0));
+
+        //cleanup the user
+        memberRepository.deleteById(response.getBody().getId());
+
+    }
+
+    private HttpEntity<Object> getHttpEntity(Object body) {
+        HttpHeaders headers = new HttpHeaders();
+        headers.setContentType(MediaType.APPLICATION_JSON);
+        return new HttpEntity<Object>(body, headers);
+    }
 
 }
diff --git a/src/test/java/com/crossover/techtrial/controller/TransactionControllerTest.java b/src/test/java/com/crossover/techtrial/controller/TransactionControllerTest.java
new file mode 100644
index 0000000..d5d9d8d
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/controller/TransactionControllerTest.java
@@ -0,0 +1,273 @@
+/**
+ *
+ */
+package com.crossover.techtrial.controller;
+
+import com.crossover.techtrial.model.Book;
+import com.crossover.techtrial.model.Transaction;
+import com.crossover.techtrial.repositories.BookRepository;
+import com.crossover.techtrial.repositories.MemberRepository;
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
+import org.springframework.boot.test.web.client.TestRestTemplate;
+import org.springframework.http.*;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import com.crossover.techtrial.model.Member;
+import com.crossover.techtrial.repositories.TransactionRepository;
+
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+/**
+ * @author kshah
+ *
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
+public class TransactionControllerTest {
+
+    MockMvc mockMvc;
+
+    @Mock
+    private TransactionController transactionController;
+
+    @Autowired
+    private TestRestTemplate template;
+
+    @Autowired
+    TransactionRepository transactionRepository;
+
+    @Autowired
+    BookRepository bookRepository;
+
+    @Autowired
+    MemberRepository memberRepository;
+
+    Book book;
+    Member member;
+
+    @Before
+    public void setup() throws Exception {
+        mockMvc = MockMvcBuilders.standaloneSetup(transactionController).build();
+        HttpEntity<Object> httpBook = getHttpEntity(
+                "{\"title\": \"Book X\" }");
+        book = template.postForEntity(
+                "/api/book", httpBook, Book.class).getBody();
+
+        HttpEntity<Object> httpMember = getHttpEntity(
+                "{\"name\": \"Larry Ellison\", \"email\": \"lellison@gmail.com\","
+                        + " \"membershipStatus\": \"ACTIVE\",\"membershipStartDate\":\"2018-12-15T12:12:12\" }");
+
+        member = template.postForEntity(
+                "/api/member", httpMember, Member.class).getBody();
+    }
+
+    @Test
+    public void testIssueBookToMemberSuccessful() throws Exception {
+
+        HttpEntity<Object> transaction = getHttpEntity(
+                "{\"bookId\": " + book.getId() + ", \"memberId\": " + member.getId() + " }");
+
+        ResponseEntity<Transaction> response = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(book.getTitle(), response.getBody().getBook().getTitle());
+        Assert.assertEquals(member.getName(), response.getBody().getMember().getName());
+        Assert.assertEquals(200, response.getStatusCode().value());
+
+        //cleanup the transaction
+        transactionRepository.deleteById(response.getBody().getId());
+    }
+
+    @Test
+    public void testNotExistingBookOnTransactionRegistration() throws Exception {
+        HttpEntity<Object> transaction = getHttpEntity(
+                "{\"bookId\": 1010101010101, \"memberId\": " + member.getId() + " }");
+        ResponseEntity<Transaction> response = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(404, response.getStatusCode().value());
+    }
+
+    @Test
+    public void testBookAlreadyBookedOnTransactionRegistration() throws Exception {
+        HttpEntity<Object> transaction = getHttpEntity(
+                "{\"bookId\": " + book.getId() + ", \"memberId\": " + member.getId() + " }");
+
+        ResponseEntity<Transaction> response1 = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(book.getTitle(), response1.getBody().getBook().getTitle());
+        Assert.assertEquals(member.getName(), response1.getBody().getMember().getName());
+        Assert.assertEquals(200, response1.getStatusCode().value());
+
+        ResponseEntity<Transaction> response2 = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(403, response2.getStatusCode().value());
+
+        //cleanup the transaction
+        transactionRepository.deleteById(response1.getBody().getId());
+    }
+
+    @Test
+    public void testBookedBooksLimitReachedByUserOnTransactionRegistration() throws Exception {
+        Book book1 = template.postForEntity(
+                "/api/book", getHttpEntity(
+                        "{\"title\": \"Book Limit Test 1\" }"), Book.class).getBody();
+
+        HttpEntity<Object> transaction = getHttpEntity(
+                "{\"bookId\": " + book1.getId() + ", \"memberId\": " + member.getId() + " }");
+        ResponseEntity<Transaction> response1 = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(book1.getTitle(), response1.getBody().getBook().getTitle());
+        Assert.assertEquals(member.getName(), response1.getBody().getMember().getName());
+        Assert.assertEquals(200, response1.getStatusCode().value());
+
+        Book book2 = template.postForEntity(
+                "/api/book", getHttpEntity(
+                        "{\"title\": \"Book Limit Test 2\" }"), Book.class).getBody();
+
+        transaction = getHttpEntity(
+                "{\"bookId\": " + book2.getId() + ", \"memberId\": " + member.getId() + " }");
+        ResponseEntity<Transaction> response2 = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(book2.getTitle(), response2.getBody().getBook().getTitle());
+        Assert.assertEquals(member.getName(), response2.getBody().getMember().getName());
+        Assert.assertEquals(200, response2.getStatusCode().value());
+
+        Book book3 = template.postForEntity(
+                "/api/book", getHttpEntity(
+                        "{\"title\": \"Book Limit Test 3\" }"), Book.class).getBody();
+
+        transaction = getHttpEntity(
+                "{\"bookId\": " + book3.getId() + ", \"memberId\": " + member.getId() + " }");
+        ResponseEntity<Transaction> response3 = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(book3.getTitle(), response3.getBody().getBook().getTitle());
+        Assert.assertEquals(member.getName(), response3.getBody().getMember().getName());
+        Assert.assertEquals(200, response3.getStatusCode().value());
+
+        Book book4 = template.postForEntity(
+                "/api/book", getHttpEntity(
+                        "{\"title\": \"Book Limit Test 4\" }"), Book.class).getBody();
+
+        transaction = getHttpEntity(
+                "{\"bookId\": " + book4.getId() + ", \"memberId\": " + member.getId() + " }");
+        ResponseEntity<Transaction> response4 = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(book4.getTitle(), response4.getBody().getBook().getTitle());
+        Assert.assertEquals(member.getName(), response4.getBody().getMember().getName());
+        Assert.assertEquals(200, response4.getStatusCode().value());
+
+        Book book5 = template.postForEntity(
+                "/api/book", getHttpEntity(
+                        "{\"title\": \"Book Limit Test 5\" }"), Book.class).getBody();
+
+        transaction = getHttpEntity(
+                "{\"bookId\": " + book5.getId() + ", \"memberId\": " + member.getId() + " }");
+        ResponseEntity<Transaction> response5 = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(book5.getTitle(), response5.getBody().getBook().getTitle());
+        Assert.assertEquals(member.getName(), response5.getBody().getMember().getName());
+        Assert.assertEquals(200, response5.getStatusCode().value());
+
+        Book book6 = template.postForEntity(
+                "/api/book", getHttpEntity(
+                        "{\"title\": \"Book Limit Test 6\" }"), Book.class).getBody();
+
+        transaction = getHttpEntity(
+                "{\"bookId\": " + book6.getId() + ", \"memberId\": " + member.getId() + " }");
+        ResponseEntity<Transaction> response6 = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(403, response6.getStatusCode().value());
+
+        //cleanup the transaction
+        transactionRepository.deleteById(response1.getBody().getId());
+        //cleanup the transaction
+        transactionRepository.deleteById(response2.getBody().getId());
+        //cleanup the transaction
+        transactionRepository.deleteById(response3.getBody().getId());
+        //cleanup the transaction
+        transactionRepository.deleteById(response4.getBody().getId());
+        //cleanup the transaction
+        transactionRepository.deleteById(response5.getBody().getId());
+
+    }
+
+    @Test
+    public void testMembershipProblemOnRegistration () {
+        HttpEntity<Object> httpMember = getHttpEntity(
+                "{\"name\": \"Larry Inactive Ellison\", \"email\": \"lellisoninactive@gmail.com\","
+                        + " \"membershipStatus\": \"INACTIVE\",\"membershipStartDate\":\"2018-12-15T12:12:12\" }");
+
+        Member memberInactive = template.postForEntity(
+                "/api/member", httpMember, Member.class).getBody();
+
+        HttpEntity<Object> transaction = getHttpEntity(
+                "{\"bookId\": " + book.getId() + ", \"memberId\": " + memberInactive.getId() + " }");
+
+        ResponseEntity<Transaction> response = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(403, response.getStatusCode().value());
+
+        //cleanup the user
+        memberRepository.deleteById(memberInactive.getId());
+    }
+
+    @Test
+    public void registerBookReturnSuccessfully () throws Exception {
+
+        HttpEntity<Object> transaction = getHttpEntity(
+                "{\"bookId\": " + book.getId() + ", \"memberId\": " + member.getId() + " }");
+
+        ResponseEntity<Transaction> response = template.postForEntity(
+                "/api/transaction", transaction, Transaction.class);
+
+        Assert.assertEquals(book.getTitle(), response.getBody().getBook().getTitle());
+        Assert.assertEquals(member.getName(), response.getBody().getMember().getName());
+        Assert.assertNotEquals(null, response.getBody().getDateOfIssue());
+        Assert.assertEquals(200, response.getStatusCode().value());
+
+        String uri = "/api/transaction/" + response.getBody().getId() + "/return";
+
+        mockMvc.perform(patch(uri)
+                .accept(MediaType.APPLICATION_JSON))
+                .andExpect(status().isOk());
+
+        //cleanup the transaction
+        transactionRepository.deleteById(response.getBody().getId());
+    }
+
+    private HttpEntity<Object> getHttpEntity(Object body) {
+        HttpHeaders headers = new HttpHeaders();
+        headers.setContentType(MediaType.APPLICATION_JSON);
+        return new HttpEntity<Object>(body, headers);
+    }
+
+    @After
+    public void beforeEnd () {
+        //cleanup the book
+        bookRepository.deleteById(book.getId());
+        //cleanup the user
+        memberRepository.deleteById(member.getId());
+    }
+
+}
diff --git a/src/test/test.iml b/src/test/test.iml
new file mode 100644
index 0000000..5ebc6f4
--- /dev/null
+++ b/src/test/test.iml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/java" isTestSource="true" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module" module-name="main" />
+  </component>
+</module>
\ No newline at end of file
-- 
2.15.3.AMZN

